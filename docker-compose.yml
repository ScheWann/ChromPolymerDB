services:
  db:
    image: postgres:17.0-bookworm
    container_name: db
    command: postgres -c max_wal_size=4GB
    restart: on-failure
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_NAME}"]
      interval: 5s      
      timeout: 5s         
      retries: 5      
    ports:
      - "5432:5432"
    networks:
      - example

  data-importer:
    build:
      context: ./backend
    container_name: data-importer
    environment:
      DB_HOST: ${DB_HOST}
      DB_NAME: ${DB_NAME}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
    volumes:
      - ./Data:/chromosome/Data
      - data_import_volume:/chromosome/import_status
    command: >
      sh -c "
        if [ ! -f /chromosome/import_status/.imported ]; then
          echo 'Start to import data...' &&
          python /chromosome/backend/init_db.py &&
          touch /chromosome/import_status/.imported &&
          echo 'Data imported'
        else
          echo 'Data exists, skip importing'
        fi
      "
    depends_on:
      db:
        condition: service_healthy
    networks:
      - example
    restart: 'no'  

  backend:
    container_name: backend
    restart: on-failure
    environment:
      DB_HOST: ${DB_HOST}
      DB_NAME: ${DB_NAME}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
    volumes:
      - ./backend:/chromosome/backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
      data-importer:
        condition: service_started
    ports:
      - "5001:5001"
    networks:
      - example

  frontend:
    container_name: frontend
    restart: on-failure
    volumes:
      - ./frontend:/chromosome/frontend:cached
      - frontend_module:/chromosome/frontend/node_modules
    build:
      context: ./frontend
      dockerfile: Dockerfile
    depends_on:
      - backend
    ports:
      - "3000:3000"
    networks:
      - example

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgAdmin
    restart: on-failure
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      - db
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "8080:80"
    networks:
      - example

  db-cron:
    build:
      context: ./cron
      dockerfile: Dockerfile
    container_name: db-cron
    environment:
      DB_HOST: ${DB_HOST}
      DB_NAME: ${DB_NAME}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
    command: sh -c 'echo "$${DB_HOST}:5432:$${DB_NAME}:$${DB_USERNAME}:$${DB_PASSWORD}" > /root/.pgpass && chmod 600 /root/.pgpass && /usr/sbin/crond -f -l 8'
    depends_on:
      db:
        condition: service_healthy
    networks:
      - example

networks:
  example:
    driver: bridge

volumes:
  frontend_module:
  pgadmin_data:
  data_import_volume:
  pgdata: